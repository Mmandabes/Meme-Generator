{"version":3,"sources":["Trollface.png","Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","trollFace","alt","MemeGenerator","state","topText","bottomText","randomImage","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","random","Math","floor","length","randMemeImg","url","onSubmit","className","type","placeholder","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAe,G,YAAA,IAA0B,uCCY1BA,MAXf,WACG,OACG,mCACM,qBACIC,IAAKC,EACLC,IAAI,aAER,mD,0CC2DGC,E,kDAhEZ,aAAe,IAAD,8BACX,gBACKC,MAAQ,CACVC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,YAAc,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATT,E,gEAYO,IAAD,OACjBE,MAAM,qCACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAIzBG,GAAQ,IAAD,EACKA,EAAMC,OAArBC,EADU,EACVA,KAAMC,EADI,EACJA,MACbC,KAAKL,SAAL,eAAgBG,EAAQC,M,mCAGdH,GACVA,EAAMK,iBACN,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWF,KAAKnB,MAAMI,YAAYoB,QAC3DC,EAAcN,KAAKnB,MAAMI,YAAYiB,GAAQK,IACnDP,KAAKL,SAAS,CAACX,YAAasB,M,+BAM5B,OACG,gCACG,uBAAME,SAAUR,KAAKZ,aAAcqB,UAAU,YAA7C,UACG,uBACGC,KAAK,OACLX,MAAOC,KAAKnB,MAAMC,QAClB6B,YAAY,WACZb,KAAK,UACLc,SAAUZ,KAAKd,eAElB,uBACGwB,KAAK,OACLX,MAAOC,KAAKnB,MAAME,WAClB4B,YAAY,cACZb,KAAK,aACLc,SAAUZ,KAAKd,eAElB,4CAEH,sBAAKuB,UAAU,OAAf,UACG,qBAAKhC,IAAKuB,KAAKnB,MAAMG,YAAaL,IAAI,aACtC,oBAAI8B,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GA3DtB8B,aCUbC,MATf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0872b1bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import trollFace from \"./Trollface.png\"\r\nfunction Header() {\r\n   return (\r\n      <header>\r\n            <img \r\n                src={trollFace} \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n   )\r\n}\r\nexport default Header","import { Component } from \"react\"\r\n\r\nclass MemeGenerator extends Component {\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         topText: \"\",\r\n         bottomText: \"\",\r\n         randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n         allMemeImgs : []\r\n      }\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.handleSubmit = this.handleSubmit.bind(this)\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetch('https://api.imgflip.com/get_memes')\r\n         .then(response => response.json())\r\n         .then(response => {\r\n            const { memes } = response.data\r\n            this.setState({ allMemeImgs: memes })\r\n         });\r\n   }\r\n\r\n   handleChange(event) {\r\n      const {name, value} = event.target\r\n      this.setState({[name] : value})\r\n   }\r\n\r\n   handleSubmit(event) {\r\n      event.preventDefault()\r\n      const random = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n      const randMemeImg = this.state.allMemeImgs[random].url\r\n      this.setState({randomImage: randMemeImg})\r\n   }\r\n\r\n\r\n\r\n   render(){\r\n      return (\r\n         <div>\r\n            <form onSubmit={this.handleSubmit} className=\"meme-form\" >\r\n               <input\r\n                  type=\"text\"\r\n                  value={this.state.topText}\r\n                  placeholder=\"Top Text\"\r\n                  name=\"topText\"\r\n                  onChange={this.handleChange}\r\n               />\r\n               <input\r\n                  type=\"text\"\r\n                  value={this.state.bottomText}\r\n                  placeholder=\"Bottom Text\"\r\n                  name=\"bottomText\"\r\n                  onChange={this.handleChange}\r\n               />\r\n               <button>Gen</button>\r\n            </form>\r\n            <div className=\"meme\">\r\n               <img src={this.state.randomImage} alt=\"meme img\" />\r\n               <h2 className=\"top\">{this.state.topText}</h2>\r\n               <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n            </div>\r\n         </div>\r\n      )\r\n}\r\n}\r\nexport default MemeGenerator","import './App.css';\nimport Header from \"./Header\"\nimport MemeGenerator from \"./MemeGenerator\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}